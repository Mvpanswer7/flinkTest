pipeline {
    agent any
    parameters {
    	choice(name: 'deploy_env', choices: "deploy\nrollbackByJobID", description: '发布类型：默认为正常发布，可选按照Jenkins Job ID回滚。')
	    string(defaultValue: '', name: 'input_version', description: '需要回滚到的Job ID，仅在手动回滚时设置该参数。')
    }
    environment {
        cur_deploy = sh (returnStdout: true, script: 'echo ${deploy_env}').trim()
        cur_branch = sh (returnStdout: true, script: 'if [[ "$input_branch" = "" ]]; then echo ${gitlabBranch}; else echo $input_branch; fi').trim()
        cur_version = sh (returnStdout: true, script: 'if [[ "$input_version" = "" ]]; then echo ${cur_branch:3}; else echo $input_version; fi').trim()
    }

    stages {
		stage ('测试变量'){
            steps {
                sh '''
                    echo "准备测环境变量是否正确..."
                    echo "当前环境参数为（发布类型：${cur_deploy}；获取分支：${cur_branch}；版本标志：${cur_version}）"
                    if [ "$cur_deploy" = "deploy" ]; then
                        if [[ "$cur_version" = "" && "$cur_branch" != "" ]]; then
                            echo "环境变量测试正常。"
                        else
                            echo "环境变量有误，请检查变量设置是否正确后重试，脚本将立刻退出。"
                            exit 1
                        fi
                    else
                        if [[ "$cur_version" != "" ]]; then
                            echo "环境变量测试正常。"
                        else
                            echo "环境变量有误，请检查变量设置是否正确后重试，脚本将立刻退出。"
                            exit 1
                        fi
                    fi
                    echo "环境变量检查正确，脚本继续执行。"
                '''
            }
        }
		stage ('获取代码') {
            steps {
                sh '''
                    echo "获取分支：${cur_branch}"
                    echo "版本标志：${cur_version}"
                '''
                git branch: "${cur_branch}", credentialsId: 'c061f10b-61bf-45bb-8ef5-56e558dbcf3c', url: 'git@git.avlyun.org:inf/insight-flinkflow.git'
            }
        }
		stage ('执行项目构建脚本'){
	    tools{
		maven 'maven'
		}
            steps {
                sh "sh ./ci/pre-build.sh"
		sh "mvn clean surefire-report:report findbugs:findbugs pmd:pmd deploy"
            }
        }
		stage ('打包生成文件'){
            steps {
                archiveArtifacts 'target/**.jar'
            }
        }
		stage ('检测代码findbugs'){
	    steps {
		findbugs canComputeNew: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', pattern: 'target/findbugsXml.xml', unHealthy: ''
		}
            }
		stage ('检测代码junit test report'){
	    steps {
		sh 'echo "暂无单元测试"'
		}
	}
		stage ('检测代码pmd'){
	    steps {
		pmd canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'target/pmd.xml', unHealthy: ''
		}
	}
        }
}

